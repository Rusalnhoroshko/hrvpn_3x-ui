# telegram_bot.py
import aiosqlite
import os
from datetime import datetime
from dotenv import load_dotenv
from loguru import logger
from aiogram import types, F
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from vpn_manager import x3
from db import add_user, DB_FILE
from tasks import (check_expirytime,
                   generate_nickname,
                   generate_payment_link)


load_dotenv()

logger.add("logs_bot.log", mode='w', level="DEBUG")

API_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

bot = Bot(token=API_TOKEN)
dp = Dispatcher()


@dp.message(Command("start"))
async def start(message: types.Message):
    user_id = message.from_user.id
    await add_user(user_id)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω –Ω–æ–≤—ã–π
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
    async with aiosqlite.connect(DB_FILE) as db:
        cursor = await db.execute('SELECT COUNT(*) FROM test_usage WHERE user_id = ?', (user_id,))
        row = await cursor.fetchone()
        has_used_test = row[0] > 0

    keyboard_buttons = [
        [InlineKeyboardButton(text="–ú–æ–∏ –∫–ª—é—á–∏", callback_data="my_keys")],
        [InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å –∫–ª—é—á", callback_data="new_key")],
        [InlineKeyboardButton(text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="instruction")],
    ]

    # –í—Å—Ç–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–¢–µ—Å—Ç –Ω–∞ –¥–µ–Ω—å" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ—Å—Ç –Ω–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
    if not has_used_test:
        keyboard_buttons.insert(1, [InlineKeyboardButton(text="–¢–µ—Å—Ç HRVPN –Ω–∞ 1 –¥–µ–Ω—å", callback_data="test_period")])

    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
@dp.callback_query(F.data == "my_keys")
async def handle_my_keys(callback: types.CallbackQuery):
    await callback.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ '–ú–æ–∏ –∫–ª—é—á–∏'.")
    tg_id = callback.from_user.id
    booster_key = x3.find_client_by_tg_id(tg_id=tg_id)
    if booster_key:
        await callback.message.answer(f"–í–∞—à –∫–ª—é—á –¥–ª—è HRVPN:<pre>{booster_key}</pre>"
                                      f"–ü—Ä–æ—Å—Ç–æ –∫–æ—Å–Ω–∏—Ç–µ—Å—å üëÜ –∏ –∫–ª—é—á —Å–∞–º —Å–∫–æ–ø–∏—Ä—É–µ—Ç—å—Å—è –≤ –±—É—Ñ—Ñ–µ—Ä –æ–±–º–µ–Ω–∞",
                                  parse_mode="HTML")
        total_seconds_left = await check_expirytime(tg_id)
        if total_seconds_left > 86400:
            days_left = (total_seconds_left // 86400)
            await bot.send_message(tg_id, f"–î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω–µ–π")
        elif 3600 < total_seconds_left <= 86400:
            hours_left = (total_seconds_left // 3600)
            await bot.send_message(tg_id, f"–î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω–µ–µ {hours_left} —á–∞—Å–æ–≤")
        elif 0 < total_seconds_left <= 3600:
            minutes_left = (total_seconds_left // 60)
            await bot.send_message(tg_id, f"–î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω–µ–µ {minutes_left} –º–∏–Ω—É—Ç")
        else:
            await bot.send_message(tg_id, "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—Ç–µ–∫")

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="renew_key")]]
        )
        await callback.message.answer("–ß—Ç–æ–±—ã –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É",
                                        reply_markup=keyboard)
    else:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å –∫–ª—é—á", callback_data="new_key")]]
        )
        await callback.message.answer("–£ –í–∞—Å –Ω–µ—Ç –∫–ª—é—á–µ–π. –ú–æ–∂–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É",
                                      reply_markup=keyboard)


@dp.callback_query(F.data == "new_key")
async def handle_new_key(callback: types.CallbackQuery):
    tg_id = callback.from_user.id
    check_key = x3.find_client_by_tg_id(tg_id=tg_id)
    if check_key:
        await callback.message.answer(f"–£ –í–∞—Å —É–∂–µ –µ—Å—Ç—å –∫–ª—é—á:<pre>{check_key}</pre>", parse_mode='HTML')
        await check_expirytime(tg_id)
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="renew_key")]])
        await callback.message.answer("–ß—Ç–æ–±—ã –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É",
                                      reply_markup=keyboard)
    else:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(
                    text="30 –¥–Ω–µ–π - 200 —Ä—É–±–ª–µ–π", callback_data="new_key_30")],
                [InlineKeyboardButton(
                    text="90 –¥–Ω–µ–π - 500 —Ä—É–±–ª–µ–π", callback_data="new_key_90")],
                [InlineKeyboardButton(
                    text="180 –¥–Ω–µ–π - 1000 —Ä—É–±–ª–µ–π", callback_data="new_key_180")],
            ]
        )
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞:", reply_markup=keyboard)


@dp.callback_query(F.data.startswith("new_key_"))
async def handle_new_subscription(callback: types.CallbackQuery):
    period = int(callback.data.split("_")[2])
    amount_mapping = {30: 5, 90: 500, 180: 1000}
    amount = amount_mapping.get(period)

    if not amount:
        await callback.message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∏.")
        return

    user_id = callback.from_user.id
    payment_label = f"{user_id}_{int(datetime.now().timestamp())}"
    payment_link = generate_payment_link(amount, payment_label, f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {period} –¥–Ω–µ–π")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"–û–ø–ª–∞—Ç–∏—Ç—å {amount} —Ä—É–±–ª–µ–π", url=payment_link)]
    ])
    await callback.message.answer(
        f"–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {period} –¥–Ω–µ–π –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",reply_markup=keyboard)


@dp.callback_query(F.data == "renew_key")
async def handle_renew_key(callback: types.CallbackQuery):
    tg_id = callback.from_user.id
    check_key = x3.find_client_by_tg_id(tg_id=tg_id)
    if check_key:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(
                    text="30 –¥–Ω–µ–π - 200 —Ä—É–±–ª–µ–π", callback_data="renew_key_30")],
                [InlineKeyboardButton(
                    text="90 –¥–Ω–µ–π - 500 —Ä—É–±–ª–µ–π", callback_data="renew_key_90")],
                [InlineKeyboardButton(
                    text="180 –¥–Ω–µ–π - 1000 —Ä—É–±–ª–µ–π", callback_data="renew_key_180")],
            ]
        )
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–¥–ª–µ–Ω–∏—è:", reply_markup=keyboard)


@dp.callback_query(F.data.startswith("renew_key_"))
async def handle_renew_subscription(callback: types.CallbackQuery):
    period = int(callback.data.split("_")[2])
    amount_mapping = {30: 5, 90: 500, 180: 1000}
    amount = amount_mapping.get(period)

    if not amount:
        await callback.message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∏.")
        return

    user_id = callback.from_user.id
    payment_label = f"renew_key_{user_id}_{int(datetime.now().timestamp())}"
    payment_link = generate_payment_link(amount, payment_label, f"–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {period} –¥–Ω–µ–π")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"–û–ø–ª–∞—Ç–∏—Ç—å {amount} —Ä—É–±–ª–µ–π", url=payment_link)]
    ])
    await callback.message.answer(
        f"–î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {period} –¥–Ω–µ–π –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",reply_markup=keyboard)


@dp.callback_query(F.data == "instruction")
async def handle_instruction(callback: types.CallbackQuery):
    tg_id = callback.from_user.id
    x3.get_inbounds()





@dp.callback_query(F.data == "test_period")
async def handle_test_period(callback: types.CallbackQuery):
    tg_id = callback.from_user.id
    random_nickname = generate_nickname()
    user_id = f"{tg_id}-{random_nickname}"

    check_key = x3.find_client_by_tg_id(tg_id=tg_id)
    if check_key:
        await callback.message.answer(f"–£ –í–∞—Å —É–∂–µ –µ—Å—Ç—å –∫–ª—é—á:<pre>{check_key}</pre>", parse_mode='HTML')
        await check_expirytime(tg_id)

    elif not check_key:
        booster_key = x3.add_client(day=1, tg_id=tg_id, user_id=user_id)
        if booster_key:
            await callback.message.answer(f"–í–∞—à –∫–ª—é—á –¥–ª—è HRVPN:<pre>{booster_key}</pre>"
                                          f"–ü—Ä–æ—Å—Ç–æ –∫–æ—Å–Ω–∏—Ç–µ—Å—å üëÜ –∏ –∫–ª—é—á —Å–∞–º —Å–∫–æ–ø–∏—Ä—É–µ—Ç—å—Å—è –≤ –±—É—Ñ—Ñ–µ—Ä –æ–±–º–µ–Ω–∞",
                                      parse_mode="HTML")
    else:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.message(Command("help"))
async def help_command(message: types.Message):
    await message.answer("–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n/start - –ù–∞—á–∞—Ç—å\n/help - –ü–æ–º–æ—â—å\n")

