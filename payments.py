# payment.py
import aiosqlite
import os
import decimal
import hashlib
import hmac
from aiohttp import web
from dotenv import load_dotenv
from loguru import logger
from urllib.parse import urlencode
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from db import DB_FILE
from telegram_bot import bot, generate_nickname
from vpn_manager import x3

load_dotenv()

logger.add("logs_payments.log", mode='w', level="DEBUG")

YOOMONEY_SECRET = os.getenv('YOOMONEY_SECRET')
YOOMONEY_WALLET = os.getenv('YOOMONEY_WALLET')
NOTIFICATION_URL = os.getenv('NOTIFICATION_URL')


def generate_payment_link(amount, label, description):
    params = {
        'receiver': YOOMONEY_WALLET,  # –í–∞—à –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ—à–µ–ª—å–∫–∞ –ÆMoney
        'quickpay-form': 'shop',
        'targets': description,
        'paymentType': 'AC',  # –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: –±–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞
        'sum': amount,
        'label': label,  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞—Ç–µ–∂–∞
        # 'successURL': SUCCESS_URL,  # URL –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
        'formcomment': description,
        'short-dest': description,
        'comment': description,
        'need-fio': 'false',
        'need-email': 'false',
        'need-phone': 'false',
        'need-address': 'false',
        'notificationURL': NOTIFICATION_URL  # URL –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –ÆMoney
    }
    payment_link = f"https://yoomoney.ru/quickpay/confirm.xml?{urlencode(params)}"
    return payment_link


async def yoomoney_notification(request):
    data = await request.post()
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –ÆMoney: {data}")

    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    notification_type = data.get('notification_type', '')
    operation_id = data.get('operation_id', '')
    amount = data.get('amount', '')
    currency = data.get('currency', '')
    datetime_str = data.get('datetime', '')
    sender = data.get('sender', '')
    codepro = data.get('codepro', '')
    label = data.get('label', '')
    sha1_hash = data.get('sha1_hash', '')
    withdraw_amount_str = data.get('withdraw_amount', '').replace(',', '.').strip()

    # –°—Ç—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏
    params_list = [
        notification_type,
        operation_id,
        amount,
        currency,
        datetime_str,
        sender,
        codepro,
        YOOMONEY_SECRET,
        label
    ]
    params = '&'.join(params_list)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
    hash_digest = hashlib.sha1(params.encode('utf-8')).hexdigest()
    if not hmac.compare_digest(hash_digest, sha1_hash):
        logger.error("–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ—Ç –ÆMoney")
        return web.Response(text='Invalid signature')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —ç—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
    async with aiosqlite.connect(DB_FILE) as db:
        cursor = await db.execute('''
            SELECT COUNT(*) FROM purchase_history WHERE operation_id = ?
        ''', (operation_id,))
        row = await cursor.fetchone()
        if row[0] > 0:
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å operation_id {operation_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.")
            return web.Response(text='OK')  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º OK, —á—Ç–æ–±—ã –ÆMoney –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

    # –ü–æ–¥–ø–∏—Å—å –≤–µ—Ä–Ω–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂
    if not label:
        logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç label –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏")
        return web.Response(text='Invalid label')

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º withdraw_amount_str –≤ Decimal
    try:
        paid_amount = decimal.Decimal(withdraw_amount_str)
        paid_amount = paid_amount.quantize(decimal.Decimal('1.00'))  # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤
    except decimal.InvalidOperation:
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ withdraw_amount: {withdraw_amount_str}")
        return web.Response(text='Invalid withdraw_amount')

    logger.info(f"paid_amount: {paid_amount}")

    # –û–±–Ω–æ–≤–ª—è–µ–º amount_mapping —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Decimal
    amount_mapping = {
        decimal.Decimal('5.00'): 5,
        decimal.Decimal('200.00'): 30,
        decimal.Decimal('500.00'): 90,
        decimal.Decimal('1000.00'): 180
    }

    matching_amount = None
    for amt in amount_mapping:
        difference = abs(paid_amount - amt)
        logger.info(f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ paid_amount: {paid_amount} –∏ amt: {amt}, —Ä–∞–∑–Ω–∏—Ü–∞: {difference}")
        if difference <= decimal.Decimal('0.01'):
            matching_amount = amt
            break

    logger.info(f"matching_amount: {matching_amount}")


    if not matching_amount:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è paid_amount: {paid_amount}")
        if label.startswith('renew_') or label.startswith('new_subscribe_'):
            parts = label.split('_')
            if len(parts) >= 2:
                user_id_str = parts[1]
                if user_id_str.isdigit():
                    user_id = int(user_id_str)
                    await bot.send_message(user_id, "–ü–æ–ª—É—á–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –æ–ø–ª–∞—Ç—ã.")
        return web.Response(text='Invalid amount')

    # –û–∫—Ä—É–≥–ª—è–µ–º —Å—É–º–º—É –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –≤ amount_mapping
    expected_period = amount_mapping[matching_amount]

    if label.startswith('renew_key_'):
        parts = label.split('_')
        if len(parts) != 4:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç label –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è: {label}")
            return web.Response(text='Invalid label format for renew')

        user_id_str = parts[2]
        if not user_id_str.isdigit():
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id –≤ label: {label}")
            return web.Response(text='Invalid user ID in label')

        user_id = int(user_id_str)
        booster_key = x3.renew_subscribe(day=expected_period, tg_id=user_id)
        if booster_key:
            await bot.send_message(user_id, f"–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ {expected_period} –¥–Ω–µ–π.")
            return web.Response(text='OK')
        else:
            await bot.send_message(user_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞.")
            return web.Response(text='Error creating VPN key')
    else:
        parts = label.split('_')
        if len(parts) != 2:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç label –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏: {label}")
            return web.Response(text='Invalid label format for new subscription')

        user_id_str = parts[0]
        if not user_id_str.isdigit():
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id –≤ label: {label}")
            return web.Response(text='Invalid user ID in label')

        user_id = int(user_id_str)
        random_nickname = generate_nickname()
        user_name = f"{user_id}-{random_nickname}"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É
        booster_key = x3.add_client(day=expected_period, tg_id=user_id, user_id=user_name)
        if booster_key:
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="instruction")]
                ]
            )
            await bot.send_message(user_id, f"–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞!")
            await bot.send_message(user_id,
                                   f"–í–∞—à –∫–ª—é—á –¥–ª—è HRVPN:<pre>{booster_key}</pre>"
                                   f"–ü—Ä–æ—Å—Ç–æ –∫–æ—Å–Ω–∏—Ç–µ—Å—å üëÜ –∏ –∫–ª—é—á —Å–∞–º —Å–∫–æ–ø–∏—Ä—É–µ—Ç—å—Å—è –≤ –±—É—Ñ—Ñ–µ—Ä –æ–±–º–µ–Ω–∞",
                                  parse_mode="HTML", reply_markup=keyboard)
            return web.Response(text='OK')
        else:
            await bot.send_message(user_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª—é—á–∞.")
            return web.Response(text='Error creating VPN key')
